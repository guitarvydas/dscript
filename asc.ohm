asc {
ASCs = ASC+

ASC = ASCname ASCbody

ASCname = ASCdefName InputPortDef* csyn OutputPortDef*

ASCbody
  = Leaf
  | Container

Leaf = CodeBlock
Container = Children Nets Connections

InputPortDef = MaybePort
OutputPortDef = MaybePort
	  
MaybePort
  = "(" ")" -- empty
  | Port    -- port
  
CodeBlock = "code" codeBlock
Children = "children" ChildReferenceInChildren+
Nets = "nets" Net+
Connections = "connections" Connection+

Net
  = NetName NetReceiver+

NetName = csyn netChar+ csyn
NetReceiver = Component

Connection
  = ConnectionSelfSenderChildReceiver
  | ConnectionSelfSenderSelfReceiver
  | ConnectionChildSenderChildReceiver
  | ConnectionChildSenderSelfReceiver

ConnectionSelfSenderChildReceiver = SelfSender NetName ChildReceiver
ConnectionSelfSenderSelfReceiver = SelfSender NetName SelfReceiver
ConnectionChildSenderChildReceiver = ChildSender NetName ChildReceiver
ConnectionChildSenderSelfReceiver = ChildSender NetName SelfReceiver

ChildReferenceInChildren = ChildReference
ChildReference = ChildComponent
ASCdefName = Component


SelfSender = selfComponent SenderPort
ChildSender = ChildReference SenderPort

SelfReceiver 
  = "$return"                  -- return
  | selfComponent ReceiverPort -- selfWithPort
ChildReceiver 
  = ChildReference ReceiverPort

SenderPort = Port
ReceiverPort = Port

Component = selfComponent | ChildComponent
ChildComponent = "[" componentName "]"
selfComponent = "[" "$self" "]"
componentName
  = selfComponent      -- self
  | componentNameChar+ -- chars
componentNameChar
  = ~"$self" ~"]" any
Port = "(" portName ")"
portName
  = "$in"         -- in
  | "$out"        -- out
  | portNameChar+ -- chars
portNameChar
  = ~"$in" ~"$out" ~")" any
codeBlock = "@{" language anyChar+ "}"
language = "bash"
anyChar
  = "{" anyChar* "}" -- nested
  | ~"}" any         -- flat
netChar = ~csyn any
csyn = ">>"
}
